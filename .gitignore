import discord
import gspread
import datetime
import urllib.request
import io
import asyncio
from google.oauth2.service_account import Credentials
from oauth2client.service_account import ServiceAccountCredentials

# discord related things
token = ''

intents = discord.Intents.all() # specify all intents
client = discord.Client(intents=intents)

# google sheets related things
scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('client_secret.json', scope)
client_gspread = gspread.authorize(creds)

# I called my sheet "Discord Bot Sheet" so you might need to change the name
sheet = client_gspread.open("Discord Bot").sheet1

# I called my sheet "Discord Bot Sheet" so you might need to change the name
sheet4 = client_gspread.open("Discord Bot").get_worksheet(3)
# I called my sheet "Discord Bot Sheet" so you might need to change the name
sheet3 = client_gspread.open("Discord Bot").get_worksheet(2)
options = {
    "(75) Recruited Someone": "Thank you for helping our community grow!",
    "(30) Helping Clan Member": "Small acts make a big difference in making Carnival stand out. This is broadly defined as any act that helps a member. This can range from reaper kills, to bringing someone food, assisting with a big decision. Any time you go out of your way to help, please feel free to submit for points for that act.",
    "(30) Created High Effort Discord Content": "Generating high quality content pushes members to be more engaged and makes the community stronger.",
    "(30) Leveled up on Discord": "Each discord level up. Ranks are viewable using !ranks, and !levels commands in the bots channel",
    "(15) Bumped Public Thread": "Bumping our public thread on the official Runescape forums. This can be claimed once a day",
    "(30) Attended a clan event": "Let an admin know if you are not sure whether the event qualified",
    "(40) Helped with a clan event": "Thank you for assisting with a clan-focused event.",
    "(60) Hosted a clan event": "Hosting events is one of the most important things members can do to help the community stay healthy and continue to recruits and grow. Please let us know if you are not sure whether the event qualifies.",
    "(50) Capped at Citadel": "Thank you for helping us continue to provide xp boosts to our members. Please check what resources are needed.",
}


def get_option_embed():
    embed = discord.Embed(title="Select an option", color=0xff0000)
    for i, option in enumerate(options):
        embed.add_field(name=f"{i + 1}. {option}", value="\u200b", inline=False)
    return embed

@client.event
async def on_ready():
    print(f"Logged in as {client.user}!")

@client.event
async def on_message(message):
    if message.author.bot:
        return

    if message.content.lower() == "/points":
        await message.channel.send('What is your exact Runescape name?')

        def check(m):
            return m.author == message.author and m.channel == message.channel

        try:
            name = await client.wait_for("message", check=check, timeout=60)
            row = sheet.find(name.content).row
            username = sheet.cell(row, 1).value
            avatar_url = f"https://secure.runescape.com/m=avatar-rs/{username}/chat.png"
            clan_rank = sheet.cell(row, 2).value
            text = f"**Clan Rank:** {clan_rank}\n"
            text += f"**Clan XP:** {sheet.cell(row, 3).value}\n"
            text += f"**Clan Points:** {sheet.cell(row, 4).value}\n"
            eligible = sheet.cell(row, 5).value
            if eligible.lower() == "eligible":
                text += f"**Rankup Eligible:** :white_check_mark:\n"
            else:
                text += f"**Rankup Eligible:** :x:\n"
            skill_tier = sheet.cell(row, 6).value
            text += f"**Skill Tier:** {skill_tier}\n"
            embed = discord.Embed(title="Clan Points", description=text, color=0xff0000)
            embed.set_author(name=username, icon_url=avatar_url)
            embed.add_field(name="\u200b", value="\u200b", inline=True)
            await message.channel.send(embed=embed)
        except gspread.exceptions.CellNotFound:
            await message.channel.send(f"Could not find {name.content} in the sheet")
        try:
            name = await client.wait_for("message", check=check, timeout=60)
            try:
                row = sheet.find(name.content).row
                username = sheet.cell(row, 1).value
                avatar_url = f"https://secure.runescape.com/m=avatar-rs/{username}/chat.png"
                clan_rank = sheet.cell(row, 2).value
                text = f"**Clan Rank:** {clan_rank}\n"
                text += f"**Clan XP:** {sheet.cell(row, 3).value}\n"
                text += f"**Clan Points:** {sheet.cell(row, 4).value}\n"
                eligible = sheet.cell(row, 5).value
                if eligible.lower() == "eligible":
                    text += f"**Rankup Eligible:** :white_check_mark:\n"
                else:
                    text += f"**Rankup Eligible:** :x:\n"
                skill_tier = sheet.cell(row, 6).value
                text += f"**Skill Tier:** {skill_tier}\n"
                embed = discord.Embed(title="Clan Points", description=text, color=0xff0000)
                embed.set_author(name=username, icon_url=avatar_url)
                embed.add_field(name="\u200b", value="\u200b", inline=False)
                await message.channel.send(embed=embed)
            except gspread.exceptions.CellNotFound:
                await message.channel.send(f"Could not find {name.content} in the sheet.")
        except asyncio.TimeoutError:
            await message.channel.send("You did not enter your name in time. Please try again.")
        except Exception as e:
            print(e)
            await message.channel.send("An error occurred. Please try again later")

    elif message.content.lower() == "/pointhistory":
        await message.channel.send('What is your exact Runescape name?')

        def check(m):
            return m.author == message.author and m.channel == message.channel

        try:
            name = await client.wait_for("message", check=check, timeout=60)
            data = sheet4.get_all_values()

            # Remove the header row if present
            if data and len(data) > 0:
                data.pop(0)

            # Filter out any empty rows
            data = [row for row in data if row]

            # Filter data by name
            filtered_data = [row for row in data if row[0].lower() == name.content.lower()]

            if not filtered_data:
                raise gspread.exceptions.CellNotFound

            # Sort rows by submission number in ascending order
            fields = []
            avatar_url = f"https://secure.runescape.com/m=avatar-rs/{name.content}/chat.png"
            for row in filtered_data:
                submission = row[3]
                points = row[2]
                time = row[5]
                fields.append((f"Submission {submission}", f"Points: {points}\nTime: {time}"))

            embed_pages = []
            embed_fields = []
            page_number = 1
            for index, (name, value) in enumerate(fields):
                if index % 10 == 0 and index != 0:
                    embed = discord.Embed(title=f"Points history for {name.content} (Page {page_number})", color=0xff0000)
                    embed.set_author(name=name.content, icon_url=avatar_url)
                    for field in embed_fields:
                        embed.add_field(name=field[0], value=field[1], inline=False)
                    embed_pages.append(embed)
                    embed_fields = []
                    page_number += 1
                embed_fields.append((name, value))
            if len(embed_fields) > 0:
                embed = discord.Embed(title=f"Points history for {name.content} (Page {page_number})", color=0xff0000)
                embed.set_author(name=name.content, icon_url=avatar_url)
                for field in embed_fields:
                    embed.add_field(name=field[0], value=field[1], inline=False)
                embed_pages.append(embed)

            current_page = 0
            message_sent = await message.channel.send(embed=embed_pages[current_page])

            await message_sent.add_reaction("◀️")
            await message_sent.add_reaction("▶️")

            def check_reaction(reaction, user):
                return user == message.author and str(reaction.emoji) in ["◀️", "▶️"] and reaction.message.id == message_sent.id

            while True:
                try:
                    reaction, user = await client.wait_for("reaction_add", timeout=30, check=check_reaction)

                    if str(reaction.emoji) == "▶️" and current_page < len(embed_pages) - 1:
                        current_page += 1
                        await message_sent.edit(embed=embed_pages[current_page])
                        await message_sent.remove_reaction(reaction, user)
                    elif str(reaction.emoji) == "◀️" and current_page > 0:
                        current_page -= 1
                        await message_sent.edit(embed=embed_pages[current_page])
                        await message_sent.remove_reaction(reaction, user)
                    else:
                        await message_sent.remove_reaction(reaction, user)
                except asyncio.TimeoutError:
                    await message_sent.clear_reactions()
                    break

        except gspread.exceptions.CellNotFound:
            await message.channel.send(f"Could not find {name.content} in the sheet")
        except asyncio.TimeoutError:
            await message.channel.send("You did not enter your name in time. Please try again.")
        except Exception as e:
            print(e)
            await message.channel.send("An error occurred. Please try again later")

    elif message.content.startswith('/submit'):
        # Display options
        option_embed = discord.Embed(title="Select an option", description="React to choose", color=0x00ff00)

        for i, option in enumerate(options):
            option_embed.add_field(name=f"{i + 1}. {option}", value="\u200b", inline=True)

        option_message = await message.channel.send(embed=option_embed)

        # Add reactions to message
        for i in range(1, len(options) + 1):
            await option_message.add_reaction(str(i) + "\u20e3")

        def check(reaction, user):
            return user == message.author and reaction.message.id == option_message.id and str(reaction.emoji) in [
                str(i) + "\u20e3" for i in range(1, len(options) + 1)]

        try:
            reaction, _ = await client.wait_for("reaction_add", check=check)
            selected_option = list(options.keys())[int(str(reaction.emoji)[0]) - 1]

            # Prompt for Runescape name and comment
            await message.channel.send("Please enter your Runescape name:")
            name_msg = await client.wait_for('message', check=lambda x: x.author == message.author)
            name = name_msg.content.strip()

            await message.channel.send("Enter a comment or write skip:")
            comment_msg = await client.wait_for('message', check=lambda x: x.author == message.author, timeout=60)
            comment = comment_msg.content.strip() if comment_msg else ""

            # Move data to approval channel
            approval_channel = client.get_channel(1079315161413853235)
            row = [selected_option, name, comment]
            approval_embed = discord.Embed(title="New Approval Request", color=0xffa500)
            approval_embed.add_field(name="Point Submission", value=selected_option, inline=False)
            approval_embed.add_field(name="Name", value=name, inline=False)
            if comment:
                approval_embed.add_field(name="Comment", value=comment, inline=False)
            approval_msg = await approval_channel.send(embed=approval_embed)
            await approval_msg.add_reaction("✅")
            await approval_msg.add_reaction("❌")

            await message.channel.send("Your request has been sent for approval by a member of the admin team.")

            # Wait for approval
            def approval_check(reaction, user):
                return user != client.user and reaction.message.id == approval_msg.id and str(reaction.emoji) in [
                    "✅", "❌"]

            approval_reaction, _ = await client.wait_for("reaction_add", check=approval_check)

            # Add to Google Sheet if approved
            if approval_reaction.emoji == "✅":
                sheet3.insert_row(row, 2)
                await message.channel.send(f"Data submitted to Google Sheet: {row}")
            else:
                await message.channel.send("Your submission was not approved.")
        except asyncio.TimeoutError:
            await message.channel.send("You did not react or enter your name in time. Please try again.")

client.run('')
